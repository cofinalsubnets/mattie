(define (term t)
  (lambda (s st) (and (string=? s t) (list st))))

(define (comp l)
  (lambda (s st) (and (not (l s st)) (list st))))

(define (conj a b)
  (lambda (s st) (let ((ar (a s st))) (and ar (b s (car ar))))))

(define (disj a b)
  (lambda (s st) (or (a s st) (b s st))))
(define c- 0)

(define (conc a b)
  (lambda (s st)
    (letrec ((l (string-length s))
             (r (lambda (n)
                  (set! c- (+ 1 c-))
                  (and (<= n l)
                       (or (let ((ar (a (substring s 0 n) st)))
                             (and ar (b (substring s n l) (car ar))))
                           (r (+ n 1)))))))
    (r 0))))

(define (lmap f l)
  (lambda (s st) (let ((r (l s st))) (and r (list (f (car r)))))))

(define (contains l s) (not (not (l s '()))))

(define (lang-f s st) #f)
(define lang-t (comp lang-f))
(define (lang-0 s st) (and (string=? s "") (list st)))
(define (lang-1 s st) (and (= 1 (string-length s)) (list st)))
(define (opt l) (disj l lang-0))
(define (rep l) (opt (conc l (lambda (s st) ((rep l) s st)))))
(define (alt . ls) (fold-right disj lang-f ls))
(define (cat . ls) (fold-right conc lang-0 ls))
(define (one-of s)
  (apply alt (map (lambda (x) (term (string x))) (string->list s))))
(define (none-of s) (comp (one-of s)))
(define ws (one-of " \n\t\r"))
(define ws* (rep ws))
(define ws+ (conc ws ws*))
(define decimal-digit
  (one-of "0123456789"))
(define english-letter
  (one-of "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(define word-start (disj english-letter (term "_")))
(define word-cont (alt word-start decimal-digit (term "-")))
(define word (conc word-start (rep word-cont)))
(define term-part (disj (conj lang-1 (comp (term "\""))) (term "\\\"")))
(define term- (cat (term "\"") (rep term-part) (term "\"")))
(define (paren s st) ((cat (term "(") ws* expr ws* (term ")"))s st))
(define uni (alt paren term- word))
(define (expr s st) ((conc ws* (alt alt- cat- paren term- word)) s st))
(define alt- (cat uni ws* (term "|") ws* expr))
(define cat- (cat uni ws+ expr))
(define defn (cat ws* word ws* (term "<-") ws* expr))
(define lang (cat defn (rep defn)))

